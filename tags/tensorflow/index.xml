<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tensorflow on Buckman&#39;s Homepage</title>
    <link>https://jacobbuckman.com/tags/tensorflow/</link>
    <description>Recent content in Tensorflow on Buckman&#39;s Homepage</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2018</copyright>
    <lastBuildDate>Mon, 17 Sep 2018 00:30:19 -0400</lastBuildDate>
    
	<atom:link href="https://jacobbuckman.com/tags/tensorflow/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Tensorflow: The Confusing Parts (2)</title>
      <link>https://jacobbuckman.com/post/tensorflow-the-confusing-parts-2/</link>
      <pubDate>Mon, 17 Sep 2018 00:30:19 -0400</pubDate>
      
      <guid>https://jacobbuckman.com/post/tensorflow-the-confusing-parts-2/</guid>
      <description>This post is the second of a series; click here for the previous post, or here for a list of all posts in this series.
Naming and Scoping Naming Variables and Tensors As we discussed in Part 1, every time you call tf.get_variable(), you need to assign the variable a new, unique name. Actually, it goes deeper than that: every tensor in the graph gets a unique name too. The name can be accessed explicitly with the .</description>
    </item>
    
    <item>
      <title>More on Graph Inspection</title>
      <link>https://jacobbuckman.com/post/graph-inspection/</link>
      <pubDate>Sun, 05 Aug 2018 01:39:42 -0400</pubDate>
      
      <guid>https://jacobbuckman.com/post/graph-inspection/</guid>
      <description>In Tensorflow: The Confusing Parts (1), I described the abstractions underlying Tensorflow at a high level in an intuitive manner. In this follow-up post, I dig more deeply, and examine how these abstractions are actually implemented. Understanding these implementation details isn&amp;rsquo;t necessarily essential to writing and using Tensorflow, but it allows us to inspect and debug computational graphs.
Inspecting Graphs The computational graph is not just a nebulous, immaterial abstraction; it is a computational object that exists, and can be inspected.</description>
    </item>
    
    <item>
      <title>Tensorflow: The Confusing Parts (1)</title>
      <link>https://jacobbuckman.com/post/tensorflow-the-confusing-parts-1/</link>
      <pubDate>Mon, 25 Jun 2018 14:53:44 +0000</pubDate>
      
      <guid>https://jacobbuckman.com/post/tensorflow-the-confusing-parts-1/</guid>
      <description>This post is the first of a series; click here for the next post, or here for a list of all posts in this series.
Click here to skip the intro and dive right in!
Introduction What is this? Who are you? Iâ€™m Jacob, a Google AI Resident. When I started the residency program in the summer of 2017, I had a lot of experience programming, and a good understanding of machine learning, but I had never used Tensorflow before.</description>
    </item>
    
  </channel>
</rss>